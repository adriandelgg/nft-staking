/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "calculateFee(uint256)": FunctionFragment;
    "cancelMultipleNFTSales(address,uint256[])": FunctionFragment;
    "cancelNFTSale(address,uint256)": FunctionFragment;
    "erc20Token()": FunctionFragment;
    "feeAmount()": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "getNFTContracts()": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "nftContracts(uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "purchaseNFT(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellMultipleNFTs(address,uint256[],uint256[])": FunctionFragment;
    "sellNFT(address,uint256,uint256)": FunctionFragment;
    "setERC20Token(address)": FunctionFragment;
    "setFeeAmount(uint256)": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokensForSale(address,uint256)": FunctionFragment;
    "totalNFTContracts()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unwhitelistNFTContract(address)": FunctionFragment;
    "whitelistNFTContract(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelMultipleNFTSales",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelNFTSale",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Token",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeAmount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nftContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseNFT",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellMultipleNFTs",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sellNFT",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setERC20Token",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForSale",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalNFTContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unwhitelistNFTContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistNFTContract",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelMultipleNFTSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelNFTSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20Token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellMultipleNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setERC20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalNFTContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwhitelistNFTContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistNFTContract",
    data: BytesLike
  ): Result;

  events: {
    "CancelledSale(address,address,uint256)": EventFragment;
    "ListedForSale(address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Purchased(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelledSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListedForSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Purchased"): EventFragment;
}

export type CancelledSaleEvent = TypedEvent<
  [string, string, BigNumber],
  { nftContract: string; seller: string; tokenId: BigNumber }
>;

export type CancelledSaleEventFilter = TypedEventFilter<CancelledSaleEvent>;

export type ListedForSaleEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { nftContract: string; seller: string; tokenId: BigNumber; price: BigNumber }
>;

export type ListedForSaleEventFilter = TypedEventFilter<ListedForSaleEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PurchasedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    nftContract: string;
    seller: string;
    buyer: string;
    tokenId: BigNumber;
    price: BigNumber;
  }
>;

export type PurchasedEventFilter = TypedEventFilter<PurchasedEvent>;

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateFee(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fee: BigNumber; toSeller: BigNumber }
    >;

    cancelMultipleNFTSales(
      _contract: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelNFTSale(
      _contract: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    erc20Token(overrides?: CallOverrides): Promise<[string]>;

    feeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    getNFTContracts(overrides?: CallOverrides): Promise<[string[]]>;

    isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    nftContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchaseNFT(
      _contract: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellMultipleNFTs(
      _seller: string,
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellNFT(
      _seller: string,
      _id: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setERC20Token(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      _collector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokensForSale(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { seller: string; price: BigNumber }>;

    totalNFTContracts(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwhitelistNFTContract(
      _nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistNFTContract(
      _nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateFee(
    _price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { fee: BigNumber; toSeller: BigNumber }>;

  cancelMultipleNFTSales(
    _contract: string,
    _ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelNFTSale(
    _contract: string,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  erc20Token(overrides?: CallOverrides): Promise<string>;

  feeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  getNFTContracts(overrides?: CallOverrides): Promise<string[]>;

  isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  nftContracts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  purchaseNFT(
    _contract: string,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellMultipleNFTs(
    _seller: string,
    _ids: BigNumberish[],
    _prices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellNFT(
    _seller: string,
    _id: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setERC20Token(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeAmount(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    _collector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokensForSale(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { seller: string; price: BigNumber }>;

  totalNFTContracts(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwhitelistNFTContract(
    _nftContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistNFTContract(
    _nftContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateFee(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fee: BigNumber; toSeller: BigNumber }
    >;

    cancelMultipleNFTSales(
      _contract: string,
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelNFTSale(
      _contract: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    erc20Token(overrides?: CallOverrides): Promise<string>;

    feeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    getNFTContracts(overrides?: CallOverrides): Promise<string[]>;

    isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    nftContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    purchaseNFT(
      _contract: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellMultipleNFTs(
      _seller: string,
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    sellNFT(
      _seller: string,
      _id: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setERC20Token(_token: string, overrides?: CallOverrides): Promise<void>;

    setFeeAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCollector(
      _collector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokensForSale(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { seller: string; price: BigNumber }>;

    totalNFTContracts(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unwhitelistNFTContract(
      _nftContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistNFTContract(
      _nftContract: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CancelledSale(address,address,uint256)"(
      nftContract?: string | null,
      seller?: string | null,
      tokenId?: null
    ): CancelledSaleEventFilter;
    CancelledSale(
      nftContract?: string | null,
      seller?: string | null,
      tokenId?: null
    ): CancelledSaleEventFilter;

    "ListedForSale(address,address,uint256,uint256)"(
      nftContract?: string | null,
      seller?: string | null,
      tokenId?: null,
      price?: null
    ): ListedForSaleEventFilter;
    ListedForSale(
      nftContract?: string | null,
      seller?: string | null,
      tokenId?: null,
      price?: null
    ): ListedForSaleEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Purchased(address,address,address,uint256,uint256)"(
      nftContract?: string | null,
      seller?: string | null,
      buyer?: null,
      tokenId?: null,
      price?: null
    ): PurchasedEventFilter;
    Purchased(
      nftContract?: string | null,
      seller?: string | null,
      buyer?: null,
      tokenId?: null,
      price?: null
    ): PurchasedEventFilter;
  };

  estimateGas: {
    calculateFee(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelMultipleNFTSales(
      _contract: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelNFTSale(
      _contract: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    erc20Token(overrides?: CallOverrides): Promise<BigNumber>;

    feeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTContracts(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nftContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseNFT(
      _contract: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellMultipleNFTs(
      _seller: string,
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellNFT(
      _seller: string,
      _id: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setERC20Token(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeCollector(
      _collector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensForSale(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalNFTContracts(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwhitelistNFTContract(
      _nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistNFTContract(
      _nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateFee(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelMultipleNFTSales(
      _contract: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelNFTSale(
      _contract: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    erc20Token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNFTContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWhitelisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseNFT(
      _contract: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellMultipleNFTs(
      _seller: string,
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellNFT(
      _seller: string,
      _id: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setERC20Token(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      _collector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensForSale(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalNFTContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwhitelistNFTContract(
      _nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistNFTContract(
      _nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
